using Microsoft.AspNetCore.SignalR;

namespace WebApi.Hubs
{
    /// <summary>
    /// The VoiceChatHub class manages the signaling process for establishing WebRTC connections 
    /// between users in a voice chat room. It handles joining rooms, sending WebRTC offers, answers, 
    /// and ICE candidates between clients in the same room.
    /// </summary>
    public class VoiceChatHub : Hub
    {
        /// <summary>
        /// Adds the current client to a specified room (voice channel).
        /// This allows the client to receive messages broadcasted to that room.
        /// </summary>
        /// <param name="channelId">The name of the room the client is joining.</param>
        /// <returns>A task representing the asynchronous operation.</returns>
        public async Task JoinRoom(string channelId)
        {
            await Groups.AddToGroupAsync(Context.ConnectionId, channelId);
        }

        /// <summary>
        /// Sends a WebRTC offer (SDP) to all clients in the specified room.
        /// The offer is used to initiate a peer-to-peer connection.
        /// </summary>
        /// <param name="channelId">The name of the room where the offer should be broadcasted.</param>
        /// <param name="sdpOffer">The SDP offer generated by the client's WebRTC connection.</param>
        /// <returns>A task representing the asynchronous operation.</returns>
        public async Task SendOffer(string channelId, string sdpOffer)
        {
            await Clients.Group(channelId).SendAsync("ReceiveOffer", Context.ConnectionId, sdpOffer);
        }

        /// <summary>
        /// Sends a WebRTC answer (SDP) to all clients in the specified room.
        /// The answer is sent in response to an offer, completing the WebRTC handshake.
        /// </summary>
        /// <param name="channelId">The name of the room where the answer should be broadcasted.</param>
        /// <param name="sdpAnswer">The SDP answer generated by the client's WebRTC connection.</param>
        /// <returns>A task representing the asynchronous operation.</returns>
        public async Task SendAnswer(string channelId, string sdpAnswer)
        {
            await Clients.Group(channelId).SendAsync("ReceiveAnswer", Context.ConnectionId, sdpAnswer);
        }

        /// <summary>
        /// Sends an ICE candidate to all clients in the specified room.
        /// ICE candidates are used to establish a peer-to-peer connection by providing network information.
        /// </summary>
        /// <param name="channelId">The name of the room where the ICE candidate should be broadcasted.</param>
        /// <param name="candidate">The ICE candidate generated by the client's WebRTC connection.</param>
        /// <returns>A task representing the asynchronous operation.</returns>
        public async Task SendIceCandidate(string channelId, string candidate)
        {
            await Clients.Group(channelId).SendAsync("ReceiveIceCandidate", Context.ConnectionId, candidate);
        }
    }
}
